package com.example.lenovo.day04.ui.zhihu.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.lenovo.day04.ui.zhihu.bean.DailyNewsArticleBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAILY_NEWS_ARTICLE_BEAN".
*/
public class DailyNewsArticleBeanDao extends AbstractDao<DailyNewsArticleBean, Long> {

    public static final String TABLENAME = "DAILY_NEWS_ARTICLE_BEAN";

    /**
     * Properties of entity DailyNewsArticleBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property NewId = new Property(0, Long.class, "newId", true, "_id");
        public final static Property Body = new Property(1, String.class, "body", false, "BODY");
        public final static Property Image_source = new Property(2, String.class, "image_source", false, "IMAGE_SOURCE");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Image = new Property(4, String.class, "image", false, "IMAGE");
        public final static Property Share_url = new Property(5, String.class, "share_url", false, "SHARE_URL");
        public final static Property Ga_prefix = new Property(6, String.class, "ga_prefix", false, "GA_PREFIX");
        public final static Property Type = new Property(7, int.class, "type", false, "TYPE");
        public final static Property Id = new Property(8, int.class, "id", false, "ID");
        public final static Property Images = new Property(9, String.class, "images", false, "IMAGES");
        public final static Property Css = new Property(10, String.class, "css", false, "CSS");
    }


    public DailyNewsArticleBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DailyNewsArticleBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAILY_NEWS_ARTICLE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: newId
                "\"BODY\" TEXT," + // 1: body
                "\"IMAGE_SOURCE\" TEXT," + // 2: image_source
                "\"TITLE\" TEXT," + // 3: title
                "\"IMAGE\" TEXT," + // 4: image
                "\"SHARE_URL\" TEXT," + // 5: share_url
                "\"GA_PREFIX\" TEXT," + // 6: ga_prefix
                "\"TYPE\" INTEGER NOT NULL ," + // 7: type
                "\"ID\" INTEGER NOT NULL ," + // 8: id
                "\"IMAGES\" TEXT," + // 9: images
                "\"CSS\" TEXT);"); // 10: css
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAILY_NEWS_ARTICLE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DailyNewsArticleBean entity) {
        stmt.clearBindings();
 
        Long newId = entity.getNewId();
        if (newId != null) {
            stmt.bindLong(1, newId);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(2, body);
        }
 
        String image_source = entity.getImage_source();
        if (image_source != null) {
            stmt.bindString(3, image_source);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(5, image);
        }
 
        String share_url = entity.getShare_url();
        if (share_url != null) {
            stmt.bindString(6, share_url);
        }
 
        String ga_prefix = entity.getGa_prefix();
        if (ga_prefix != null) {
            stmt.bindString(7, ga_prefix);
        }
        stmt.bindLong(8, entity.getType());
        stmt.bindLong(9, entity.getId());
 
        String images = entity.getImages();
        if (images != null) {
            stmt.bindString(10, images);
        }
 
        String css = entity.getCss();
        if (css != null) {
            stmt.bindString(11, css);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DailyNewsArticleBean entity) {
        stmt.clearBindings();
 
        Long newId = entity.getNewId();
        if (newId != null) {
            stmt.bindLong(1, newId);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(2, body);
        }
 
        String image_source = entity.getImage_source();
        if (image_source != null) {
            stmt.bindString(3, image_source);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(5, image);
        }
 
        String share_url = entity.getShare_url();
        if (share_url != null) {
            stmt.bindString(6, share_url);
        }
 
        String ga_prefix = entity.getGa_prefix();
        if (ga_prefix != null) {
            stmt.bindString(7, ga_prefix);
        }
        stmt.bindLong(8, entity.getType());
        stmt.bindLong(9, entity.getId());
 
        String images = entity.getImages();
        if (images != null) {
            stmt.bindString(10, images);
        }
 
        String css = entity.getCss();
        if (css != null) {
            stmt.bindString(11, css);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DailyNewsArticleBean readEntity(Cursor cursor, int offset) {
        DailyNewsArticleBean entity = new DailyNewsArticleBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // newId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // body
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // image_source
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // image
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // share_url
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ga_prefix
            cursor.getInt(offset + 7), // type
            cursor.getInt(offset + 8), // id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // images
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // css
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DailyNewsArticleBean entity, int offset) {
        entity.setNewId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBody(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImage_source(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShare_url(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGa_prefix(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.getInt(offset + 7));
        entity.setId(cursor.getInt(offset + 8));
        entity.setImages(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCss(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DailyNewsArticleBean entity, long rowId) {
        entity.setNewId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DailyNewsArticleBean entity) {
        if(entity != null) {
            return entity.getNewId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DailyNewsArticleBean entity) {
        return entity.getNewId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
